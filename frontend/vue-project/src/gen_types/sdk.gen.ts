// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { AddProcedureCatsCatIdProceduresPostData, AddProcedureCatsCatIdProceduresPostErrors, AddProcedureCatsCatIdProceduresPostResponses, CreateCatCatsPostData, CreateCatCatsPostErrors, CreateCatCatsPostResponses, CreateFosterHomeFosterHomesPostData, CreateFosterHomeFosterHomesPostErrors, CreateFosterHomeFosterHomesPostResponses, CreateManagerManagersPostData, CreateManagerManagersPostErrors, CreateManagerManagersPostResponses, CreateTaskTasksPostData, CreateTaskTasksPostErrors, CreateTaskTasksPostResponses, DeleteCatCatsCatIdDeleteData, DeleteCatCatsCatIdDeleteErrors, DeleteCatCatsCatIdDeleteResponses, GetCatCatsCatIdGetData, GetCatCatsCatIdGetErrors, GetCatCatsCatIdGetResponses, GetImageImageObjectNameGetData, GetImageImageObjectNameGetErrors, GetImageImageObjectNameGetResponses, ListCatsCatsGetData, ListCatsCatsGetResponses, ListFosterHomesFosterHomesGetData, ListFosterHomesFosterHomesGetResponses, ListManagersManagersGetData, ListManagersManagersGetResponses, ListProceduresCatsCatIdProceduresGetData, ListProceduresCatsCatIdProceduresGetErrors, ListProceduresCatsCatIdProceduresGetResponses, ListTasksForCatCatsCatIdTasksGetData, ListTasksForCatCatsCatIdTasksGetErrors, ListTasksForCatCatsCatIdTasksGetResponses, ListTasksTasksGetData, ListTasksTasksGetResponses, ReadRootGetData, ReadRootGetResponses, UpdateCatCatsCatIdPatchData, UpdateCatCatsCatIdPatchErrors, UpdateCatCatsCatIdPatchResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadRootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * List Cats
 */
export const listCatsCatsGet = <ThrowOnError extends boolean = false>(options?: Options<ListCatsCatsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListCatsCatsGetResponses, unknown, ThrowOnError>({
        url: '/cats',
        ...options
    });
};

/**
 * Create Cat
 */
export const createCatCatsPost = <ThrowOnError extends boolean = false>(options: Options<CreateCatCatsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateCatCatsPostResponses, CreateCatCatsPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/cats',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete Cat
 */
export const deleteCatCatsCatIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCatCatsCatIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCatCatsCatIdDeleteResponses, DeleteCatCatsCatIdDeleteErrors, ThrowOnError>({
        url: '/cats/{cat_id}',
        ...options
    });
};

/**
 * Get Cat
 */
export const getCatCatsCatIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCatCatsCatIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCatCatsCatIdGetResponses, GetCatCatsCatIdGetErrors, ThrowOnError>({
        url: '/cats/{cat_id}',
        ...options
    });
};

/**
 * Update Cat
 */
export const updateCatCatsCatIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateCatCatsCatIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateCatCatsCatIdPatchResponses, UpdateCatCatsCatIdPatchErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/cats/{cat_id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * List Managers
 */
export const listManagersManagersGet = <ThrowOnError extends boolean = false>(options?: Options<ListManagersManagersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListManagersManagersGetResponses, unknown, ThrowOnError>({
        url: '/managers',
        ...options
    });
};

/**
 * Create Manager
 */
export const createManagerManagersPost = <ThrowOnError extends boolean = false>(options: Options<CreateManagerManagersPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateManagerManagersPostResponses, CreateManagerManagersPostErrors, ThrowOnError>({
        url: '/managers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Foster Homes
 */
export const listFosterHomesFosterHomesGet = <ThrowOnError extends boolean = false>(options?: Options<ListFosterHomesFosterHomesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListFosterHomesFosterHomesGetResponses, unknown, ThrowOnError>({
        url: '/foster-homes',
        ...options
    });
};

/**
 * Create Foster Home
 */
export const createFosterHomeFosterHomesPost = <ThrowOnError extends boolean = false>(options: Options<CreateFosterHomeFosterHomesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateFosterHomeFosterHomesPostResponses, CreateFosterHomeFosterHomesPostErrors, ThrowOnError>({
        url: '/foster-homes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Image
 */
export const getImageImageObjectNameGet = <ThrowOnError extends boolean = false>(options: Options<GetImageImageObjectNameGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetImageImageObjectNameGetResponses, GetImageImageObjectNameGetErrors, ThrowOnError>({
        url: '/image/{object_name}',
        ...options
    });
};

/**
 * List Procedures
 */
export const listProceduresCatsCatIdProceduresGet = <ThrowOnError extends boolean = false>(options: Options<ListProceduresCatsCatIdProceduresGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ListProceduresCatsCatIdProceduresGetResponses, ListProceduresCatsCatIdProceduresGetErrors, ThrowOnError>({
        url: '/cats/{cat_id}/procedures',
        ...options
    });
};

/**
 * Add Procedure
 */
export const addProcedureCatsCatIdProceduresPost = <ThrowOnError extends boolean = false>(options: Options<AddProcedureCatsCatIdProceduresPostData, ThrowOnError>) => {
    return (options.client ?? client).post<AddProcedureCatsCatIdProceduresPostResponses, AddProcedureCatsCatIdProceduresPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/cats/{cat_id}/procedures',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * List Tasks
 */
export const listTasksTasksGet = <ThrowOnError extends boolean = false>(options?: Options<ListTasksTasksGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTasksTasksGetResponses, unknown, ThrowOnError>({
        url: '/tasks',
        ...options
    });
};

/**
 * Create Task
 */
export const createTaskTasksPost = <ThrowOnError extends boolean = false>(options: Options<CreateTaskTasksPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTaskTasksPostResponses, CreateTaskTasksPostErrors, ThrowOnError>({
        url: '/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Tasks For Cat
 */
export const listTasksForCatCatsCatIdTasksGet = <ThrowOnError extends boolean = false>(options: Options<ListTasksForCatCatsCatIdTasksGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ListTasksForCatCatsCatIdTasksGetResponses, ListTasksForCatCatsCatIdTasksGetErrors, ThrowOnError>({
        url: '/cats/{cat_id}/tasks',
        ...options
    });
};
